package it.unibas.instcompview.nodes;

import java.awt.BorderLayout;
import javax.swing.ActionMap;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.util.Exceptions;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;


/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd="-//it.unibas.instcompview.nodes//ScenarioExplorer//EN",
    autostore=false
)
@TopComponent.Description(
    preferredID="ScenarioExplorerTopComponent", 
    //iconBase="SET/PATH/TO/ICON/HERE", 
    persistenceType=TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "it.unibas.instcompview.nodes.ScenarioExplorerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_ScenarioExplorerAction",
    preferredID="ScenarioExplorerTopComponent"
)
@Messages({
    "CTL_ScenarioExplorerAction=ScenarioExplorer",
    "CTL_ScenarioExplorerTopComponent=ScenarioExplorer Window",
    "HINT_ScenarioExplorerTopComponent=This is a ScenarioExplorer window"
})
public final class ScenarioExplorerTopComponent extends TopComponent 
        implements ExplorerManager.Provider, LookupListener{
    
    private final ExplorerManager explorer = new ExplorerManager();
    private final ProgressHandle handle = ProgressHandle.createHandle("Loading...");
    
    public ScenarioExplorerTopComponent() {
        initComponents();
        setName(Bundle.CTL_ScenarioExplorerTopComponent());
        setToolTipText(Bundle.HINT_ScenarioExplorerTopComponent());
	putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        setLayout(new BorderLayout());
        BeanTreeView btv = new BeanTreeView();
        btv.setRootVisible(false);
        add(btv, BorderLayout.CENTER);
        handle.start();
        Children scenarios = Children.create(new ScenarioChildFactory(), true);
        AbstractNode rootNode;
        try{
            rootNode = new AbstractNode(scenarios);
            explorer.setRootContext(rootNode);
            ActionMap map = getActionMap();
            map.put("delete", ExplorerUtils.actionDelete(explorer, true));
            associateLookup(ExplorerUtils.createLookup(explorer, map));
        } catch(Exception ex){
            Exceptions.printStackTrace(ex);
            handle.finish();
        }
        handle.finish();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }
    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return explorer;
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        
    }
}
