package it.unibas.instcompview.view;

import bart.comparison.InstanceMatchTask;
import bart.comparison.TupleMapping;
import it.unibas.instcompview.Scenario;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JToolBar;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.openide.awt.UndoRedo;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.Lookups;
import org.openide.windows.TopComponent;
import speedy.model.database.TupleWithTable;
import speedy.utility.comparator.StringComparator;

/**
 *
 * @author aurelio.sofia
 */
@MultiViewElement.Registration(
        displayName = "#LBL_TupleMappingMVE",
        mimeType = "application/x-comparison",
        persistenceType = TopComponent.PERSISTENCE_NEVER,
        preferredID = "TupleMappingMVE",
        position = 20)
@Messages("LBL_TupleMappingMVE=Tuple Mappings")
public class TupleMappingMVE extends javax.swing.JPanel 
        implements MultiViewElement{

    /**
     * Creates new form TupleMappingMultiViewElement
     */
    private MultiViewElementCallback callback = null;
    private final InstanceMatchTask result;
    private final Scenario scenario;
    
    public TupleMappingMVE(Lookup lookup) {
        this.scenario = lookup.lookup(Scenario.class);
        this.result = scenario.getResult();
        initComponents();
    }
    
    private void initTupleMappingPanel() {
        TupleMapping tupleMapping = result.getTupleMapping();
        List<TupleWithTable> allKeys = new ArrayList<>(tupleMapping.getTupleMapping().keySet());
        Collections.sort(allKeys, new StringComparator());
        
        String tableName = allKeys.get(0).getTable();
        allKeys.add(new TupleWithTable("end", null)); //To stop the algorithm
        List<TupleWithTable> leftTuples = new ArrayList<>();
        for(TupleWithTable twt : allKeys){
            if(twt.getTable().equalsIgnoreCase(tableName)) {
                leftTuples.add(twt);
            } else {
                addNewTupleMappingPanel(tupleMapping, leftTuples);
                leftTuples = new ArrayList<>();
                leftTuples.add(twt); //Necessary in order to not loose the new Table;
                tableName = twt.getTable();
            }
        }
    }
    
    private void addNewTupleMappingPanel(TupleMapping tupleMapping, 
            List<TupleWithTable> leftTuples){
        
        List<TupleWithTable> rightTuples = new ArrayList<>();
        
        for(int i = 0; i < leftTuples.size(); i++){
            TupleWithTable twt1 = leftTuples.get(i);
            if(tupleMapping.getTupleMapping().get(twt1).size() > 1){
                for(TupleWithTable twt2 : tupleMapping.getTupleMapping().get(twt1)){
                    leftTuples.add(i, twt1);
                }
                leftTuples.remove(i);
                i += (tupleMapping.getTupleMapping().get(twt1).size() - 1);
            }
            rightTuples.addAll(new ArrayList<>(tupleMapping.getTupleMapping().get(twt1)));
        }
        String table = leftTuples.get(0).getTable();
        
        this.tupleMappingTabbedPane.add(table, new TupleMappingPanel(leftTuples, rightTuples, true));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tupleMappingScrollPane = new javax.swing.JScrollPane();
        tupleMappingTabbedPane = new javax.swing.JTabbedPane();

        tupleMappingScrollPane.setViewportView(tupleMappingTabbedPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tupleMappingScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 599, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tupleMappingScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public JComponent getVisualRepresentation() {
        return this;
    }

    @Override
    public JComponent getToolbarRepresentation() {
        JToolBar jtb = new JToolBar();
        jtb.setFloatable(false);
        return jtb;
    }

    @Override
    public Action[] getActions() {
        if(callback != null)   {
            return callback.createDefaultActions();
        }
        Action[] a = {};
        return a;
    }

    @Override
    public Lookup getLookup() {
        return Lookups.singleton(scenario);
    }

     @Override
    public void componentOpened() {
        initTupleMappingPanel();
    }

    @Override
    public void componentClosed() {}

    @Override
    public void componentShowing() {}

    @Override
    public void componentHidden() {}

    @Override
    public void componentActivated() {
    }

    @Override
    public void componentDeactivated() {}

    @Override
    public UndoRedo getUndoRedo() {
        return UndoRedo.NONE;
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback) {
        this.callback = callback;
        callback.getTopComponent().setDisplayName(scenario.getScenario() + " - Comparison Result");
    }

    @Override
    public CloseOperationState canCloseElement() {
        return CloseOperationState.STATE_OK;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane tupleMappingScrollPane;
    private javax.swing.JTabbedPane tupleMappingTabbedPane;
    // End of variables declaration//GEN-END:variables
   
}
